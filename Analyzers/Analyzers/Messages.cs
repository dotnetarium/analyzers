using System;
using System.Buffers.Text;
using System.Collections.Generic;
using System.Data;
using System.Net.NetworkInformation;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;

namespace Analyzers
{
    internal static class Messages
    {
        public static readonly string ApprovedCipherMode = "Review cipher mode usage with cryptography experts";
        public static readonly string ApprovedCipherModeMessage = "Review the usage of cipher mode '{0}' with cryptography experts. Consider using recommended modes (CBC, CTS).";
        public static readonly string ApprovedCipherModeDescription = "These cipher modes might be vulnerable to attacks. Consider using recommended modes (CBC, CTS).";

        public static readonly string DataSetDataTableInRceDeserializableObjectGraphTitle = "Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks";
        public static readonly string DataSetDataTableInRceDeserializableObjectGraphMessage = "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}";

        public static readonly string DataSetDataTableInDeserializableObjectGraphMessage = "When deserializing untrusted input, deserializing a {0}\r\n    object is insecure. '{1}' either is or derives from {0}";
        public static readonly string DataSetDataTableInDeserializableObjectGraphTitle = "Unsafe DataSet or DataTable type found in deserializable object graph";

        public static readonly string DataSetDataTableInRceSerializableTypeTitle = "Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks";
        public static readonly string DataSetDataTableInRceSerializableTypeMessage = "When deserializing untrusted input with an IFormatter-based serializer, deserializing a {0}\r\n    object is insecure. '{1}' either is or derives from {0}.";
        public static readonly string DataSetDataTableInSerializableTypeTitle = "Unsafe DataSet or DataTable in serializable type";
        public static readonly string DataSetDataTableInSerializableTypeMessage = "When deserializing untrusted input, deserializing a {0} object is insecure. '{1}' either is or derives from {0}";
        public static readonly string DataSetDataTableInRceAutogeneratedSerializableTypeMessage = "When deserializing untrusted input with an IFormatter-based serializer, deserializing a {0} object is insecure. '{1}' either is or derives from {0}. Ensure that the auto-generated type is never deserialized with untrusted data.";
        public static readonly string DataSetDataTableInRceAutogeneratedSerializableTypeTitle = "Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks";

        public static readonly string DataSetDataTableInWebDeserializableObjectGraphMessage = "When deserializing untrusted input, deserializing a {0}\r\n    object is insecure. '{1}' either is or derives from {0}";
        public static readonly string DataSetDataTableInWebDeserializableObjectGraphTitle = "nsafe DataSet or DataTable type in web deserializable object graph";

        public static readonly string DoNotAddArchiveItemPathToTheTargetFileSystemPath = "Do Not Add Archive Item's Path To The Target File System Path";
        public static readonly string DoNotAddArchiveItemPathToTheTargetFileSystemPathDescription = "When extracting files from an archive and using the archive item's path, check if the path is safe. Archive path can be relative and can lead to file system access outside of the expected file system target path, leading to malicious config changes and remote code execution via lay-and-wait technique.";
        public static readonly string DoNotAddArchiveItemPathToTheTargetFileSystemPathMessage = "When creating path for '{0} in method {1}' from relative archive item path to extract file and the source is an untrusted zip archive, make sure to sanitize relative archive item path '{2} in method {3}'";

        public static readonly string DoNotAddSchemaByURL = "Do Not Add Schema By URL";
        public static readonly string DoNotAddSchemaByURLDescription = "This overload of XmlSchemaCollection.Add method internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.";
        public static readonly string DoNotAddSchemaByURLMessage = "This overload of the Add method is potentially unsafe because it may resolve dangerous external references";

        public static readonly string DoNotAlwaysSkipTokenValidationInDelegatesTitle = "Do not always skip token validation in delegates";
        public static readonly string DoNotAlwaysSkipTokenValidationInDelegatesDescription = "By setting critical TokenValidationParameter validation delegates to true, important authentication safeguards are disabled which can lead to tokens from any issuer or expired tokens being wrongly validated.";
        public static readonly string DoNotAlwaysSkipTokenValidationInDelegatesMessage = "The {0} is set to a function that is always returning true. By setting the validation delegate, you are overriding default validation and by always returning true, this validation is completely disabled.";

        public static readonly string DoNotCallDangerousMethodsInDeserializationTitle = "Do Not Call Dangerous Methods In Deserialization";
        public static readonly string DoNotCallDangerousMethodsInDeserializationDescription = "Insecure Deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application, inflict a Denial-of-Service (DoS) attack, or even execute arbitrary code upon it being deserialized. It’s frequently possible for malicious users to abuse these deserialization features when the application is deserializing untrusted data which is under their control. Specifically, invoke dangerous methods in the process of deserialization. Successful insecure deserialization attacks could allow an attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution.";
        public static readonly string DoNotCallDangerousMethodsInDeserializationMessage = "When deserializing an instance of class '{0}', method '{1}' can directly or indirectly call dangerous method '{2}'";

        public static readonly string DoNotDisableCertificateValidation = "Do Not Disable Certificate Validation";
        public static readonly string DoNotDisableCertificateValidationDescription = "A certificate can help authenticate the identity of the server. Clients should validate the server certificate to ensure requests are sent to the intended server. If the ServerCertificateValidationCallback always returns 'true', any certificate will pass validation.";
        public static readonly string DoNotDisableCertificateValidationMessage = "The ServerCertificateValidationCallback is set to a function that accepts any server certificate, by always returning true. Ensure that server certificates are validated to verify the identity of the server receiving requests.";


        public static readonly string DefinitelyDisableHttpClientCRLCheck = "HttpClients should enable certificate revocation list checks";
        public static readonly string DefinitelyDisableHttpClientCRLCheckMessage = "HttpClient is created without enabling CheckCertificateRevocationList";
        public static readonly string DoNotDisableHttpClientCRLCheckDescription = "Using HttpClient without providing a platform specific handler (WinHttpHandler or CurlHandler or HttpClientHandler) where the CheckCertificateRevocationList property is set to true, will allow revoked certificates to be accepted by the HttpClient as valid.";
        public static readonly string MaybeDisableHttpClientCRLCheck = "Ensure HttpClient certificate revocation list check is not disabled";
        public static readonly string MaybeDisableHttpClientCRLCheckMessage = "HttpClient may be created without enabling CheckCertificateRevocationList";

        public static readonly string DoNotDisableHTTPHeaderChecking = "Do Not Disable HTTP Header Checking";
        public static readonly string DoNotDisableHTTPHeaderCheckingDescription = "HTTP header checking enables encoding of the carriage return and newline characters, \r and \n, that are found in response headers. This encoding can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header.";
        public static readonly string DoNotDisableHTTPHeaderCheckingMessage = "Do not disable HTTP header checking";

        public static readonly string DoNotDisableRequestValidation = "Do Not Disable Request Validation";
        public static readonly string DoNotDisableRequestValidationDescription = "Request validation is a feature in ASP.NET that examines HTTP requests and determines whether they contain potentially dangerous content. This check adds protection from markup or code in the URL query string, cookies, or posted form values that might have been added for malicious purposes. So, it is generally desirable and should be left enabled for defense in depth.";
        public static readonly string DoNotDisableRequestValidationMessage = "{0} has request validation disabled";

        public static readonly string DoNotDisableTokenValidationChecksTitle = "Do not disable token validation checks";
        public static readonly string DoNotDisableTokenValidationChecksDescription = "Token validation checks ensure that while validating tokens, all aspects are analyzed and verified. Turning off validation can lead to security holes by allowing untrusted tokens to make it through validation.";
        public static readonly string DoNotDisableTokenValidationChecksMessage = "TokenValidationParameters.{0} should not be set to false as it disables important validation";

        public static readonly string DefinitelyInstallRootCert = "Do Not Add Certificates To Root Store";
        public static readonly string DefinitelyInstallRootCertMessage = "Adding certificates to the operating system's trusted root certificates increases the risk of incorrectly authenticating an illegitimate certificate";
        public static readonly string DoNotInstallRootCertDescription = "By default, the Trusted Root Certification Authorities certificate store is configured with a set of public CAs that has met the requirements of the Microsoft Root Certificate Program. Since all trusted root CAs can issue certificates for any domain, an attacker can pick a weak or coercible CA that you install by yourself to target for an attack - and a single vulnerable, malicious or coercible CA undermines the security of the entire system. To make matters worse, these attacks can go unnoticed quite easily.";
        public static readonly string MaybeInstallRootCert = "Ensure Certificates Are Not Added To Root Store";
        public static readonly string MaybeInstallRootCertMessage = "Adding certificates to the operating system's trusted root certificates is insecure. Ensure that the target store is not root store.";

        public static readonly string DoNotSerializeTypesWithPointerFields = "Do Not Serialize Types With Pointer Fields";
        public static readonly string DoNotSerializeTypesWithPointerFieldsDescription = "Pointers are not \"type safe\" in the sense that you cannot guarantee the correctness of the memory they point at. So, serializing types with pointer fields is dangerous, as it may allow an attacker to control the pointer.";
        public static readonly string DoNotSerializeTypesWithPointerFieldsMessage = "Pointer field {0} on serializable type";

        public static readonly string DoNotDisableSchUseStrongCrypto = "Do Not Disable SChannel Use of Strong Crypto";
        public static readonly string DoNotDisableSchUseStrongCryptoDescription = "Starting with the .NET Framework 4.6, the System.Net.ServicePointManager and System.Net.Security.SslStream classes are recommended to use new protocols. The old ones have protocol weaknesses and are not supported. Setting Switch.System.Net.DontEnableSchUseStrongCrypto with true will use the old weak crypto check and opt out of the protocol migration.";
        public static readonly string DoNotDisableSchUseStrongCryptoMessage = "{0} disables TLS 1.2 and enables SSLv3";
        public static readonly string DoNotDisableUsingServicePointManagerSecurityProtocolsMessage = "Do not set Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true.  Setting this switch limits Windows Communication Framework (WCF) to using Transport Layer Security (TLS) 1.0, which is insecure and obsolete.";
        public static readonly string DoNotDisableUsingServicePointManagerSecurityProtocolsTitle = "Do not disable ServicePointManagerSecurityProtocols";

        public static readonly string DoNotUseAccountSAS = "Do Not Use Account Shared Access Signature";
        public static readonly string DoNotUseAccountSASDescription = "Shared Access Signatures(SAS) are a vital part of the security model for any application using Azure Storage, they should provide limited and safe permissions to your storage account to clients that don't have the account key. All of the operations available via a service SAS are also available via an account SAS, that is, account SAS is too powerful. So it is recommended to use Service SAS to delegate access more carefully.";
        public static readonly string DoNotUseAccountSASMessage = "Use Service SAS instead of Account SAS for fine grained access control and container-level access policy";

        public static readonly string DefinitelyUseCreateEncryptorWithNonDefaultIV = "Do not use CreateEncryptor with non-default IV";
        public static readonly string DefinitelyUseCreateEncryptorWithNonDefaultIVMessage = "Symmetric encryption uses non-default initialization vector, which could be potentially repeatable";
        public static readonly string MaybeUseCreateEncryptorWithNonDefaultIV = "Use CreateEncryptor with the default IV";
        public static readonly string MaybeUseCreateEncryptorWithNonDefaultIVMessage = "The non-default initialization vector, which can be potentially repeatable, is used in the encryption. Ensure use the default one.";
        public static readonly string DoNotUseCreateEncryptorWithNonDefaultIVDescription = "Symmetric encryption should always use a non-repeatable initialization vector to prevent dictionary attacks.";

        public static readonly string DataSetReadXmlMessage = "The method '{0}' is insecure when deserializing untrusted data";
        public static readonly string DataSetReadXmlTitle = "Do not use DataSet.ReadXml() with untrusted data";
        public static readonly string DataSetReadXmlAutogeneratedMessage = "The method '{0}' is insecure when deserializing untrusted data.Make sure that auto-generated class containing the '{0}' call is not deserialized with untrusted data.";
        public static readonly string DataSetReadXmlAutogeneratedTitle = "Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data";

        public static readonly string DataTableReadXmlMessage = "The method '{0}' is insecure when deserializing untrusted data";
        public static readonly string DataTableReadXmlTitle = "Do not use DataTable.ReadXml() with untrusted data";

        public static readonly string DoNotUseDSA = "Do Not Use Digital Signature Algorithm (DSA)";
        public static readonly string DoNotUseDSADescription = "DSA is too weak to use.";
        public static readonly string DoNotUseDSAMessage = "Asymmetric encryption algorithm {0} is weak. Switch to an RSA with at least 2048 key size, ECDH or ECDSA algorithm instead.";

        public static readonly string BinaryFormatterMethodUsedDescription = "The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect BinaryFormatter deserialization without a SerializationBinder set, then disable rule CA2300, and enable rules CA2301 and CA2302.";
        public static readonly string BinaryFormatterMethodUsedMessage = "The method '{0}' is insecure when deserializing untrusted data.";
        public static readonly string BinaryFormatterMethodUsedTitle = "Do not use insecure deserializer BinaryFormatter";

        public static readonly string BinaryFormatterDeserializeMaybeWithoutBinderSetMessage = "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.";
        public static readonly string BinaryFormatterDeserializeMaybeWithoutBinderSetTitle = "Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize";
        public static readonly string BinaryFormatterDeserializeWithoutBinderSetMessage = "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.";
        public static readonly string BinaryFormatterDeserializeWithoutBinderSetTitle = "Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder";

        public static readonly string JavaScriptSerializerMaybeWithSimpleTypeResolverMessage = "The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Ensure that the JavaScriptSerializer is initialized without a JavaScriptTypeResolver specified, or initialized with a JavaScriptTypeResolver that limits the types of objects in the deserialized object graph.";
        public static readonly string JavaScriptSerializerMaybeWithSimpleTypeResolverTitle = "Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing";
        public static readonly string JavaScriptSerializerWithSimpleTypeResolverMessage = "The method '{0}' is insecure when deserializing untrusted data with a JavaScriptSerializer initialized with a SimpleTypeResolver. Initialize JavaScriptSerializer without a JavaScriptTypeResolver specified, or initialize with a JavaScriptTypeResolver that limits the types of objects in the deserialized object graph.";
        public static readonly string JavaScriptSerializerWithSimpleTypeResolverTitle = "Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver";

        public static readonly string JsonNetInsecureSerializerMessage = "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure. When using deserializing JsonSerializer, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.";
        public static readonly string JsonNetInsecureSerializerTitle = "Do not deserialize with JsonSerializer using an insecure configuration";
        public static readonly string JsonNetMaybeInsecureSerializerMessage = "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure. When using deserializing JsonSerializer, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.";
        public static readonly string JsonNetMaybeInsecureSerializerTitle = "Ensure that JsonSerializer has a secure configuration when deserializing";

        public static readonly string LosFormatterMethodUsedMessage = "The method '{0}' is insecure when deserializing untrusted data.";
        public static readonly string LosFormatterMethodUsedTitle = "Do not use insecure deserializer LosFormatter";

        public static readonly string NetDataContractSerializerMethodUsedDescription = "The method '{0}' is insecure when deserializing untrusted data.  If you need to instead detect NetDataContractSerializer deserialization without a SerializationBinder set, then disable rule CA2310, and enable rules CA2311 and CA2312.";
        public static readonly string NetDataContractSerializerMethodUsedMessage = "The method '{0}' is insecure when deserializing untrusted data.";
        public static readonly string NetDataContractSerializerMethodUsedTitle = "Do not use insecure deserializer NetDataContractSerializer";

        public static readonly string NetDataContractSerializerDeserializeMaybeWithoutBinderSetMessage = "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.";
        public static readonly string NetDataContractSerializerDeserializeMaybeWithoutBinderSetTitle = "Ensure NetDataContractSerializer.Binder is set before deserializing";
        public static readonly string NetDataContractSerializerDeserializeWithoutBinderSetMessage = "The method '{0}' is insecure when deserializing untrusted data without a SerializationBinder to restrict the type of objects in the deserialized object graph.";
        public static readonly string NetDataContractSerializerDeserializeWithoutBinderSetTitle = "Do not deserialize without first setting NetDataContractSerializer.Binder";

        public static readonly string ObjectStateFormatterMethodUsedMessage = "The method '{0}' is insecure when deserializing untrusted data.";
        public static readonly string ObjectStateFormatterMethodUsedTitle = "Do not use insecure deserializer ObjectStateFormatter";

        public static readonly string DoNotUseInsecureRandomness = "Do not use insecure randomness";
        public static readonly string DoNotUseInsecureRandomnessMessage = "{0} is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.";
        public static readonly string DoNotUseInsecureRandomnessDescription = "Using a cryptographically weak pseudo-random number generator may allow an attacker to predict what security-sensitive value will be generated. Use a cryptographically strong random number generator if an unpredictable value is required, or ensure that weak pseudo-random numbers aren't used in a security-sensitive manner.";

        public static readonly string JsonNetInsecureSettingsMessage = "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure.  When using JsonSerializerSettings, use TypeNameHandling.None, or for values other than None, restrict deserialized types with a SerializationBinder.";
        public static readonly string JsonNetInsecureSettingsTitle = "Do not use insecure JsonSerializerSettings";
        public static readonly string JsonNetMaybeInsecureSettingsMessage = "When deserializing untrusted input, allowing arbitrary types to be deserialized is insecure.  When using JsonSerializerSettings, ensure TypeNameHandling.None is specified, or for values other than None, ensure a SerializationBinder is specified to restrict deserialized types.";
        public static readonly string JsonNetMaybeInsecureSettingsTitle = "Ensure that JsonSerializerSettings are secure";

        public static readonly string DoNotUseObsoleteKDFAlgorithm = "Do not use obsolete key derivation function";
        public static readonly string DoNotUseObsoleteKDFAlgorithmDescription = "Password-based key derivation should use PBKDF2 with SHA-2. Avoid using PasswordDeriveBytes since it generates a PBKDF1 key. Avoid using Rfc2898DeriveBytes.CryptDeriveKey since it doesn't use the iteration count or salt.";
        public static readonly string DoNotUseObsoleteKDFAlgorithmMessage = "Call to obsolete key derivation function {0}.{1}";

        public static readonly string DoNotUseWeakKDFAlgorithm = "Ensure Key Derivation Function algorithm is sufficiently strong";
        public static readonly string DoNotUseWeakKDFAlgorithmDescription = "Some implementations of the Rfc2898DeriveBytes class allow for a hash algorithm to be specified in a constructor parameter or overwritten in the HashAlgorithm property. If a hash algorithm is specified, then it should be SHA-256 or higher.";
        public static readonly string DoNotUseWeakKDFAlgorithmMessage = "{0} might be using a weak hash algorithm. Use SHA256, SHA384, or SHA512 to create a strong key from a password.";

        public static readonly string DefinitelyUseWeakKDFInsufficientIterationCount = "Do Not Use Weak Key Derivation Function With Insufficient Iteration Count";
        public static readonly string DefinitelyUseWeakKDFInsufficientIterationCountMessage = "Use at least {0} iterations when deriving a cryptographic key from a password. By default, Rfc2898DeriveByte's IterationCount is only 1000";
        public static readonly string DoNotUseWeakKDFInsufficientIterationCountDescription = "When deriving cryptographic keys from user-provided inputs such as password, use sufficient iteration count (at least 100k).";
        public static readonly string MaybeUseWeakKDFInsufficientIterationCount = "Ensure Sufficient Iteration Count When Using Weak Key Derivation Function";
        public static readonly string MaybeUseWeakKDFInsufficientIterationCountMessage = "Ensure that the iteration count is at least {0} when deriving a cryptographic key from a password. By default, Rfc2898DeriveByte's IterationCount is only 1000";

        public static readonly string DoNotUseXslTransform = "Do Not Use XslTransform";
        public static readonly string DoNotUseXslTransformMessage = "Do not use XslTransform. It does not restrict potentially dangerous external references.";

        public static readonly string JsonNetTypeNameHandlingDescription = "Deserializing JSON when using a TypeNameHandling value other than None can be insecure.  If you need to instead detect Json.NET deserialization when a SerializationBinder isn't specified, then disable rule CA2326, and enable rules CA2327, CA2328, CA2329, and CA2330.";
        public static readonly string JsonNetTypeNameHandlingMessage = "Deserializing JSON when using a TypeNameHandling value other than None can be insecure.";
        public static readonly string JsonNetTypeNameHandlingTitle = "Do not use TypeNameHandling values other than None";

        public static readonly string PotentialReferenceCycleInDeserializedObjectGraphTitle = "Potential reference cycle in deserialized object graph";
        public static readonly string PotentialReferenceCycleInDeserializedObjectGraphDescription = "Review code that processes untrusted deserialized data for handling of unexpected reference cycles. An unexpected reference cycle should not cause the code to enter an infinite loop. Otherwise, an unexpected reference cycle can allow an attacker to DOS or exhaust the memory of the process when deserializing untrusted data.";
        public static readonly string PotentialReferenceCycleInDeserializedObjectGraphMessage = "{0} participates in a potential reference cycle";

        public static readonly string ReviewCodeForProcessCommandInjectionVulnerabilitiesMessage = "Potential process command injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForProcessCommandInjectionVulnerabilitiesTitle = "Review code for process command injection vulnerabilities";

        public static readonly string ReviewCodeForDllInjectionVulnerabilitiesMessage = "Potential DLL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForDllInjectionVulnerabilitiesTitle = "Review code for DLL injection vulnerabilities";

        public static readonly string ReviewCodeForFilePathInjectionVulnerabilitiesMessage = "Potential file path injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForFilePathInjectionVulnerabilitiesTitle = "Review code for file path injection vulnerabilities";

        public static readonly string ReviewCodeForInformationDisclosureVulnerabilitiesMessage = "Potential information disclosure vulnerability was found where '{0}' in method '{1}' may contain unintended information from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForInformationDisclosureVulnerabilitiesTitle = "Review code for information disclosure vulnerabilities";

        public static readonly string ReviewCodeForLdapInjectionVulnerabilitiesMessage = "Potential LDAP injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForLdapInjectionVulnerabilitiesTitle = "Review code for LDAP injection vulnerabilities";

        public static readonly string ReviewCodeForOpenRedirectVulnerabilitiesMessage = "Potential open redirect vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForOpenRedirectVulnerabilitiesTitle = "Review code for open redirect vulnerabilities";

        public static readonly string ReviewCodeForRegexInjectionVulnerabilitiesMessage = "Potential regex injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForRegexInjectionVulnerabilitiesTitle = "Review code for regex injection vulnerabilities";

        public static readonly string ReviewCodeForSqlInjectionVulnerabilitiesMessage = "Potential SQL injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForSqlInjectionVulnerabilitiesTitle = "Review code for SQL injection vulnerabilities";

        public static readonly string ReviewCodeForXamlInjectionVulnerabilitiesMessage = "Potential XAML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForXamlInjectionVulnerabilitiesTitle = "Review code for XAML injection vulnerabilities";

        public static readonly string ReviewCodeForXmlInjectionVulnerabilitiesMessage = "Potential XML injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForXmlInjectionVulnerabilitiesTitle = "Review code for XML injection vulnerabilities";

        public static readonly string ReviewCodeForXPathInjectionVulnerabilitiesMessage = "Potential XPath injection vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForXPathInjectionVulnerabilitiesTitle = "Review code for XPath injection vulnerabilities";

        public static readonly string ReviewCodeForXssVulnerabilitiesMessage = "Potential cross-site scripting (XSS) vulnerability was found where '{0}' in method '{1}' may be tainted by user-controlled data from '{2}' in method '{3}'.";
        public static readonly string ReviewCodeForXssVulnerabilitiesTitle = "Review code for XSS vulnerabilities";

        public static readonly string SetHttpOnlyForHttpCookie = "Set HttpOnly to true for HttpCookie";
        public static readonly string SetHttpOnlyForHttpCookieDescription = "As a defense in depth measure, ensure security sensitive HTTP cookies are marked as HttpOnly. This indicates web browsers should disallow scripts from accessing the cookies. Injected malicious scripts are a common way of stealing cookies.";
        public static readonly string SetHttpOnlyForHttpCookieMessage = "HttpCookie.HttpOnly is set to false or not set at all when using an HttpCookie. Ensure security sensitive cookies are marked as HttpOnly to prevent malicious scripts from stealing the cookies";

        public static readonly string SetViewStateUserKey = "Set ViewStateUserKey For Classes Derived From Page";
        public static readonly string SetViewStateUserKeyDescription = "Setting the ViewStateUserKey property can help you prevent attacks on your application by allowing you to assign an identifier to the view-state variable for individual users so that they cannot use the variable to generate an attack. Otherwise, there will be cross-site request forgery vulnerabilities.";
        public static readonly string SetViewStateUserKeyMessage = "The class {0} derived from System.Web.UI.Page does not set the ViewStateUserKey property in the OnInit method or Page_Init method";

        public static readonly string DeprecatedSslProtocolsDescription = "Older protocol versions of Transport Layer Security (TLS) are less secure than TLS 1.2 and TLS 1.3, and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk.";
        public static readonly string DeprecatedSslProtocolsMessage = "Transport Layer Security protocol version '{0}' is deprecated.  Use 'None' to let the Operating System choose a version.";
        public static readonly string DeprecatedSslProtocolsTitle = "Do not use deprecated SslProtocols values";

        public static readonly string HardcodedSslProtocolsDescription = "Current Transport Layer Security protocol versions may become deprecated if vulnerabilities are found. Avoid hardcoding SslProtocols values to keep your application secure. Use 'None' to let the Operating System choose a version.";
        public static readonly string HardcodedSslProtocolsMessage = "Avoid hardcoding SslProtocols '{0}' to ensure your application remains secure in the future. Use 'None' to let the Operating System choose a version.";
        public static readonly string HardcodedSslProtocolsTitle = "Avoid hardcoded SslProtocols values";

        public static readonly string UseAutoValidateAntiforgeryToken = "Use antiforgery tokens in ASP.NET Core MVC controllers";
        public static readonly string UseAutoValidateAntiforgeryTokenDescription = "Handling a POST, PUT, PATCH, or DELETE request without validating an antiforgery token may be vulnerable to cross-site request forgery attacks. A cross-site request forgery attack can send malicious requests from an authenticated user to your ASP.NET Core MVC controller.";
        public static readonly string UseAutoValidateAntiforgeryTokenMessage = "Method {0} handles a {1} request without performing antiforgery token validation. You also need to ensure that your HTML form sends an antiforgery token.";

        public static readonly string MissHttpVerbAttribute = "Miss HttpVerb attribute for action methods";
        public static readonly string MissHttpVerbAttributeMessage = "Action method {0} needs to specify the HTTP request kind explicitly";

        public static readonly string UseContainerLevelAccessPolicy = "Use Container Level Access Policy";
        public static readonly string UseContainerLevelAccessPolicyDescription = "No access policy identifier is specified, making tokens non-revocable.";
        public static readonly string UseContainerLevelAccessPolicyMessage = "Consider using Azure's role-based access control instead of a Shared Access Signature (SAS) if possible. If you still need to use a SAS, use a container-level access policy when creating a SAS.";

        public static readonly string UseDefaultDllImportSearchPathsAttribute = "Use DefaultDllImportSearchPaths attribute for P/Invokes";
        public static readonly string UseDefaultDllImportSearchPathsAttributeDescription = "By default, P/Invokes using DllImportAttribute probe a number of directories, including the current working directory for the library to load. This can be a security issue for certain applications, leading to DLL hijacking.";
        public static readonly string UseDefaultDllImportSearchPathsAttributeMessage = "The method {0} didn't use DefaultDllImportSearchPaths attribute for P/Invokes.";
        public static readonly string DoNotUseUnsafeDllImportSearchPath = "Do not use unsafe DllImportSearchPath value";
        public static readonly string DoNotUseUnsafeDllImportSearchPathDescription = "There could be a malicious DLL in the default DLL search directories. Or, depending on where your application is run from, there could be a malicious DLL in the application's directory. Use a DllImportSearchPath value that specifies an explicit search path instead. The DllImportSearchPath flags that this rule looks for can be configured in .editorconfig.";
        public static readonly string DoNotUseUnsafeDllImportSearchPathMessage = "Use of unsafe DllImportSearchPath value {0}";

        public static readonly string UseRSAWithSufficientKeySize = "Use Rivest-Shamir-Adleman (RSA) Algorithm With Sufficient Key Size";
        public static readonly string UseRSAWithSufficientKeySizeDescription = "Encryption algorithms are vulnerable to brute force attacks when too small a key size is used.";
        public static readonly string UseRSAWithSufficientKeySizeMessage = "Asymmetric encryption algorithm {0}'s key size is less than 2048. Switch to an RSA with at least 2048 key size, ECDH or ECDSA algorithm instead.";

        public static readonly string DefinitelyUseSecureCookiesASPNetCore = "Use Secure Cookies In ASP.NET Core";
        public static readonly string DefinitelyUseSecureCookiesASPNetCoreMessage = "Set CookieOptions.Secure = true when setting a cookie";
        public static readonly string MaybeUseSecureCookiesASPNetCore = "Ensure Use Secure Cookies In ASP.NET Core";
        public static readonly string MaybeUseSecureCookiesASPNetCoreMessage = "Ensure that CookieOptions.Secure = true when setting a cookie";

        public static readonly string UseSharedAccessProtocolHttpsOnly = "Use SharedAccessProtocol HttpsOnly";
        public static readonly string UseSharedAccessProtocolHttpsOnlyDescription = "HTTPS encrypts network traffic. Use HttpsOnly, rather than HttpOrHttps, to ensure network traffic is always encrypted to help prevent disclosure of sensitive data.";
        public static readonly string UseSharedAccessProtocolHttpsOnlyMessage = "Consider using Azure's role-based access control instead of a Shared Access Signature (SAS) if possible. If you still need to use a SAS, specify SharedAccessProtocol.HttpsOnly.";

        public static readonly string UseXmlReaderMessage = "This overload of the '{0}.{1}' method is potentially unsafe. It may enable Document Type Definition (DTD) which can be vulnerable to denial of service attacks, or might use an XmlResolver which can be vulnerable to information disclosure. Use an overload that takes a XmlReader instance instead, with DTD processing disabled and no XmlResolver.";
        public static readonly string UseXmlReaderDescription = "Processing XML from untrusted data may load dangerous external references, which should be restricted by using an XmlReader with a secure resolver or with DTD processing disabled.";
        public static readonly string UseXmlReaderForDataSetReadXml = "Use XmlReader for 'DataSet.ReadXml()'";
        public static readonly string UseXmlReaderForDeserialize = "Use XmlReader for 'XmlSerializer.Deserialize()'";
        public static readonly string UseXmlReaderForSchemaRead = "Use XmlReader for 'XmlSchema.Read()'";
        public static readonly string UseXmlReaderForValidatingReader = "Use XmlReader for XmlValidatingReader constructor";
        public static readonly string UseXmlReaderForXPathDocument = "Use XmlReader for XPathDocument constructor";



        public static string ReviewSQLQueriesForSecurityVulnerabilitiesDescription = "SQL queries that directly use user input can be vulnerable to SQL injection attacks. Review this SQL query for potential vulnerabilities, and consider using a parameterized SQL query.";
        public static string ReviewSQLQueriesForSecurityVulnerabilitiesMessageNoNonLiterals = "Review if the query string passed to '{0}' in '{1}', accepts any user input";
        public static string ReviewSQLQueriesForSecurityVulnerabilitiesTitle = "Review SQL queries for security vulnerabilities";
        public static string DoNotCallToImmutableCollectionOnAnImmutableCollectionValueTitle = "Do not call ToImmutableCollection on an ImmutableCollection value";
        public static string DoNotCallToImmutableCollectionOnAnImmutableCollectionValueMessage = "Do not call {0} on an {1} value";
        public static string RemoveRedundantCall = "Remove redundant call";
        public static string PInvokesShouldNotBeVisibleTitle = "P/Invokes should not be visible";
        public static string PInvokesShouldNotBeVisibleDescription = "A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed.";
        public static string PInvokesShouldNotBeVisibleMessage = "P/Invoke method '{0}' should not be visible";
        public static string SpecifyMarshalingForPInvokeStringArgumentsTitle = "Specify marshaling for P/Invoke string arguments";
        public static string SpecifyMarshalingForPInvokeStringArgumentsDescription = "A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.";
        public static string UseManagedEquivalentsOfWin32ApiTitle = "Use managed equivalents of win32 api";
        public static string UseManagedEquivalentsOfWin32ApiDescription = "An operating system invoke method is defined and a method that has the equivalent functionality is located in the .NET Framework class library.";
        public static string UseManagedEquivalentsOfWin32ApiMessage = "Use managed equivalents of win32 api";
        public static string MarkBooleanPInvokeArgumentsWithMarshalAsTitle = "Mark boolean PInvoke arguments with MarshalAs";
        public static string MarkBooleanPInvokeArgumentsWithMarshalAsDescription = "The Boolean data type has multiple representations in unmanaged code.";
        public static string MarkBooleanPInvokeArgumentsWithMarshalAsMessageDefault = "Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).";
        public static string MarkBooleanPInvokeArgumentsWithMarshalAsMessageReturn = "Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).";
        public static string MarkAssembliesWithNeutralResourcesLanguageTitle = "Mark assemblies with NeutralResourcesLanguageAttribute";
        public static string MarkAssembliesWithNeutralResourcesLanguageDescription = "The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set.";
        public static string MarkAssembliesWithNeutralResourcesLanguageMessage = "Mark assemblies with NeutralResourcesLanguageAttribute";
        public static string UseOrdinalStringComparisonTitle = "Use ordinal string comparison";
        public static string UseOrdinalStringComparisonDescription = "A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable.";
        public static string DoNotUseCountWhenAnyCanBeUsedDescription = "For non-empty collections, Count() and LongCount() enumerate the entire sequence, while Any() stops at the first item or the first item that satisfies a condition.";
        public static string DoNotUseCountWhenAnyCanBeUsedMessage = "{0}() is used where Any() could be used instead to improve performance";
        public static string DoNotUseCountWhenAnyCanBeUsedTitle = "Do not use Count() or LongCount() when Any() can be used";
        public static string PreferConvertToHexStringOverBitConverterTitle = "Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'";
        public static string PreferConvertToHexStringOverBitConverterDescription = "Use 'Convert.ToHexString' or 'Convert.ToHexStringLower' when encoding bytes to a hexadecimal string representation. These methods are more efficient and allocation-friendly than using 'BitConverter.ToString' in combination with 'String.Replace' to replace dashes and 'String.ToLower'.";
        public static string PreferConvertToHexStringOverBitConverterMessage = "Prefer '{0}' over call chains based on '{1}'";
        public static string PreferConvertToHexStringOverBitConverterCodeFixTitle = "Replace with 'Convert.{0}'";
        public static string DoNotUseTimersThatPreventPowerStateChangesTitle = "Do not use timers that prevent power state changes";
        public static string DoNotUseTimersThatPreventPowerStateChangesDescription = "Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.";
        public static string DoNotUseTimersThatPreventPowerStateChangesMessage = "Do not use timers that prevent power state changes";
        public static string AvoidUnsealedAttributesTitle = "Avoid unsealed attributes";
        public static string AvoidUnsealedAttributesDescription = "The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance.";
        public static string AvoidUnsealedAttributesMessage = "Avoid unsealed attributes";
        public static string AvoidConstArraysTitle = "Avoid constant arrays as arguments";
        public static string AvoidConstArraysCodeFixTitle = "Extract to static readonly field";
        public static string AvoidConstArraysDescription = "Constant arrays passed as arguments are not reused when called repeatedly, which implies a new array is created each time. Consider extracting them to 'static readonly' fields to improve performance if the passed array is not mutated within the called method.";
        public static string AvoidConstArraysMessage = "Prefer 'static readonly' fields over constant array arguments if the called method is called repeatedly and is not mutating the passed array";
        public static string AvoidUnreliableStreamReadTitle = "Avoid inexact read with 'Stream.Read'";
        public static string AvoidUnreliableStreamReadCodeFixTitle = "Use 'Stream.ReadExactly'";
        public static string AvoidUnreliableStreamReadDescription = "A call to 'Stream.Read' may return fewer bytes than requested, resulting in unreliable code if the return value is not checked.";
        public static string AvoidUnreliableStreamReadMessage = "Avoid inexact read with '{0}'";
        public static string TestForEmptyStringsUsingStringLengthTitle = "Test for empty strings using string length";
        public static string TestForEmptyStringsUsingStringLengthDescription = "Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals.";
        public static string TestForEmptyStringsUsingStringLengthMessage = "Test for empty strings using 'string.Length' property or 'string.IsNullOrEmpty' method instead of an Equality check";
        public static string DoNotLockOnObjectsWithWeakIdentityTitle = "Do not lock on objects with weak identity";
        public static string DoNotLockOnObjectsWithWeakIdentityDescription = "An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object.";
        public static string DoNotLockOnObjectsWithWeakIdentityMessage = "Do not lock on objects with weak identity";
        public static string DoNotRaiseReservedExceptionTypesTitle = "Do not raise reserved exception types";
        public static string DoNotRaiseReservedExceptionTypesDescription = "An exception of type that is not sufficiently specific or reserved by the runtime should never be raised by user code. This makes the original error difficult to detect and debug. If this exception instance might be thrown, use a different exception type.";
        public static string DoNotRaiseReservedExceptionTypesMessageTooGeneric = "Exception type {0} is not sufficiently specific";
        public static string DoNotRaiseReservedExceptionTypesMessageReserved = "Exception type {0} is reserved by the runtime";
        public static string InitializeValueTypeStaticFieldsInlineTitle = "Initialize value type static fields inline";
        public static string InitializeReferenceTypeStaticFieldsInlineTitle = "Initialize reference type static fields inline";



















   



        public static readonly string DoNotHardCodeCertificate = "Do not hard-code certificate";
        public static readonly string DoNotHardCodeCertificateDescription = "Hard-coded certificates in source code are vulnerable to being exploited.";
        public static readonly string DoNotHardCodeCertificateMessage = "Potential security vulnerability was found where '{0}' in method '{1}' may be tainted by hard-coded certificate from '{2}' in method '{3}'";

        public static readonly string DoNotHardCodeEncryptionKey = "Do not hard-code encryption key";
        public static readonly string DoNotHardCodeEncryptionKeyDescription = "SymmetricAlgorithm's .Key property, or a method's rgbKey parameter, should never be a hard-coded value.";
        public static readonly string DoNotHardCodeEncryptionKeyMessage = "Potential security vulnerability was found where '{0}' in method '{1}' may be tainted by hard-coded key from '{2}' in method '{3}'";

        public static readonly string DoNotUseDeprecatedSecurityProtocols = "Do Not Use Deprecated Security Protocols";
        public static readonly string DoNotUseDeprecatedSecurityProtocolsDescription = "Using a deprecated security protocol rather than the system default is risky.";
        public static readonly string DoNotUseDeprecatedSecurityProtocolsMessage = "Hard-coded use of deprecated security protocol {0}";
        public static readonly string HardCodedSecurityProtocolMessage = "Avoid hardcoding SecurityProtocolType {0}, and instead use SecurityProtocolType.SystemDefault to allow the operating system to choose the best Transport Layer Security protocol to use.";
        public static readonly string HardCodedSecurityProtocolTitle = "Avoid hardcoding SecurityProtocolType value";

        public static readonly string DoNotUseBrokenCryptographicAlgorithms = "Do Not Use Broken Cryptographic Algorithms";
        public static readonly string DoNotUseBrokenCryptographicAlgorithmsDescription = "An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits.";
        public static readonly string DoNotUseBrokenCryptographicAlgorithmsMessage = "{0} uses a broken cryptographic algorithm {1}";
        public static readonly string DoNotUseWeakCryptographicAlgorithms = "Do Not Use Weak Cryptographic Algorithms";
        public static readonly string DoNotUseWeakCryptographicAlgorithmsDescription = "Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered  messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256.";
        public static readonly string DoNotUseWeakCryptographicAlgorithmsMessage = "{0} uses a weak cryptographic algorithm {1}";








        public static string DoNotUseReferenceEqualsWithValueTypesDescription = "Value type typed arguments are uniquely boxed for each call to this method, therefore the result can be unexpected.";
        public static string DoNotUseReferenceEqualsWithValueTypesComparerMessage = "Do not pass an argument with value type '{0}' to the 'Equals' method on 'ReferenceEqualityComparer'. Due to value boxing, this call to 'Equals' can return an unexpected result. Consider using 'EqualityComparer' instead, or pass reference type arguments if you intend to use 'ReferenceEqualityComparer'.";
        public static string DoNotUseReferenceEqualsWithValueTypesMethodMessage = "Do not pass an argument with value type '{0}' to 'ReferenceEquals'. Due to value boxing, this call to 'ReferenceEquals' can return an unexpected result. Consider using 'Equals' instead, or pass reference type arguments if you intend to use 'ReferenceEquals'.";
        public static string DoNotUseReferenceEqualsWithValueTypesTitle = "Do not use ReferenceEquals with value types";







        public static string UseAsSpanInsteadOfArrayRangeIndexerDescription = "The Range-based indexer on array values produces a copy of requested portion of the array. This copy is often unwanted when it is implicitly used as a Span or Memory value. Use the AsSpan method to avoid the copy.";
        public static string UseAsSpanInsteadOfStringRangeIndexerDescription = "The Range-based indexer on string values produces a copy of requested portion of the string. This copy is usually unnecessary when it is implicitly used as a ReadOnlySpan or ReadOnlyMemory value. Use the AsSpan method to avoid the unnecessary copy.";
        public static string UseAsSpanInsteadOfRangeIndexerMessage = "Use '{0}' instead of the '{1}'-based indexer on '{2}' to avoid creating unnecessary data copies";
        public static string UseAsSpanInsteadOfRangeIndexerTitle = "Use AsSpan or AsMemory instead of Range-based indexers when appropriate";
        public static string UseAsSpanReadOnlyInsteadOfArrayRangeIndexerDescription = "The Range-based indexer on array values produces a copy of requested portion of the array. This copy is usually unnecessary when it is implicitly used as a ReadOnlySpan or ReadOnlyMemory value. Use the AsSpan method to avoid the unnecessary copy.";

        public static string UseSecureCookiesASPNetCoreDescription = "Applications available over HTTPS must use secure cookies.";

  

        public static string DoNotCallEnumerableCastOrOfTypeWithIncompatibleTypesTitle = "Do not call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types";





        public static string DoNotUseCountAsyncWhenAnyAsyncCanBeUsedDescription = "For non-empty collections, CountAsync() and LongCountAsync() enumerate the entire sequence, while AnyAsync() stops at the first item or the first item that satisfies a condition.";
        public static string DoNotUseCountAsyncWhenAnyAsyncCanBeUsedMessage = "{0}() is used where AnyAsync() could be used instead to improve performance";
        public static string DoNotUseCountAsyncWhenAnyAsyncCanBeUsedTitle = "Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used";
        public static string UsePropertyInsteadOfCountMethodWhenAvailableDescription = "Enumerable.Count() potentially enumerates the sequence while a Length/Count property is a direct access.";
        public static string UsePropertyInsteadOfCountMethodWhenAvailableMessage = "Use the \"{0}\" property instead of Enumerable.Count()";
        public static string UsePropertyInsteadOfCountMethodWhenAvailableTitle = "Use Length/Count property instead of Count() when available";



        public static string MissHttpVerbAttributeDescription = "All the methods that create, edit, delete, or otherwise modify data do so in the [HttpPost] overload of the method, which needs to be protected with the anti forgery attribute from request forgery. Performing a GET operation should be a safe operation that has no side effects and doesn't modify your persisted data.";
        

    }
}
